name: Time Tracking for "In Progress" Label

on:
  issues:
    types: [labeled]

jobs:
  time-tracking:
    runs-on: ubuntu-latest

    steps:
      - name: Initialize variables
        run: |
          echo "START_TIME=" >> $GITHUB_ENV
          echo "END_TIME=" >> $GITHUB_ENV
          echo "TOTAL_TIME=0" >> $GITHUB_ENV

      - name: Handle "In Progress" label
        if: contains(github.event.label.name, 'in progress')
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const issue_number = context.issue.number;
            const now = Date.now();

            if (!process.env.START_TIME) {
              require('fs').appendFileSync(process.env.GITHUB_ENV, `START_TIME=${now}\n`);
              const comment = `Timer started for issue #${issue_number} at ${new Date(now).toISOString()}`;
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number,
                body: comment,
              });
            } else {
              const start_time = parseInt(process.env.START_TIME, 10);
              const elapsed_time = Math.floor((now - start_time) / 1000);
              const total_time = parseInt(process.env.TOTAL_TIME || '0', 10) + elapsed_time;
              require('fs').appendFileSync(process.env.GITHUB_ENV, `TOTAL_TIME=${total_time}\n`);

              const formatted_time = `${Math.floor(elapsed_time / 60)} minutes ${elapsed_time % 60} seconds`;
              const comment = `Elapsed time for issue #${issue_number}: ${formatted_time}`;
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number,
                body: comment,
              });

              // Reset the timer
              require('fs').appendFileSync(process.env.GITHUB_ENV, `START_TIME=${now}\n`);
            }
