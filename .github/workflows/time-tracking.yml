name: Time Tracking for Issue Transitions

on:
  issues:
    types: [labeled, unlabeled]
    labels: [baglog, in progress, wait_review, review, done]

jobs:
  time-tracking:
    runs-on: ubuntu-latest

    steps:
      - name: Initialize variables
        id: init
        run: |
          echo "START_TIME=" >> $GITHUB_ENV
          echo "END_TIME=" >> $GITHUB_ENV
          echo "TOTAL_TIME=0" >> $GITHUB_ENV

      - name: Handle label change events
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.issue.number;
            const previous_labels = context.payload.changes.labels.from.map(label => label.name);
            const current_labels = context.payload.issue.labels.map(label => label.name);

            // Determine the label transition
            let transition = "";
            if (previous_labels.includes("baglog") && current_labels.includes("in progress")) {
              transition = "baglog_to_in_progress";
            } else if (previous_labels.includes("in progress") && current_labels.includes("wait_review")) {
              transition = "in_progress_to_wait_review";
            } else if (previous_labels.includes("wait_review") && current_labels.includes("review")) {
              transition = "wait_review_to_review";
            } else if (previous_labels.includes("review") && current_labels.includes("done")) {
              transition = "review_to_done";
            }

            // Update timestamps and total time based on the transition
            if (transition) {
              const now = Date.now();
              if (transition === "baglog_to_in_progress") {
                core.exportVariable('START_TIME', now);
              } else if (transition === "review_to_done") {
                core.exportVariable('END_TIME', now);
              }

              const start_time = parseInt(process.env.START_TIME || "0", 10);
              const end_time = parseInt(process.env.END_TIME || "0", 10);
              if (start_time && end_time) {
                const elapsed_time = (end_time - start_time) / 1000;
                const total_time = parseInt(process.env.TOTAL_TIME || "0", 10) + elapsed_time;
                core.exportVariable('TOTAL_TIME', total_time);

                // Post a comment with the time spent on the transition
                const formatted_time = `${Math.floor(elapsed_time / 60)} minutes ${Math.floor(elapsed_time % 60)} seconds`;
                const comment = `Temps pass√© pour ${transition}: ${formatted_time}`;
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number,
                  body: comment,
                });

                // Reset timestamps
                core.exportVariable('START_TIME', "");
                core.exportVariable('END_TIME', "");
              }
            }
